{"path":"pdf/课件/L18 - NPC1.pdf","text":"Introduction to Algorithm Design and Analysis [18] NP Complete Problems 1 Jingwei Xu https://ics.nju.edu.cn/~xjw Institute of Computer Software Nanjing University Syllabus Model of Computation Algorithm Design & Analysis Techniques Computation Complexity Hard Games & Puzzles Complexity of games & puzzles Complexity of algorithmic problems NP-Complete Problems • Decision Problem • The class P • The class NP • Reduction between problems How Functions GrowHanoi Tower Revisited • It is easy to provide a recursive algorithm to resolve the problem of Hanoi Tower • The solution requires 2 N -1 moves of disc. • It is extremely difﬁcult to achieve the result for an input of moderate size • For the input of 64, it takes half a million years even if the Tibetan priest has superhuman strength to move a million discs in a second. Max Clique - an Example • A complete subgraph of a graph G is called a clique, whose size is the number of vertices in it. • Optimization problem: Find the maximal clique in a given graph G. • Decision problem: Has G a clique of size at least k for some given k? Decision Problem • Statement of a decision problem • Part 1: instance description deﬁning the input • Part 2: question stating the actual yes-or-no question • A decision problem is a mapping from all possible inputs into the set {yes , no} Optimization v.s. Decision • Usually, an optimization problem can be rephrased as a decision problem. • For some cases, it can be proved that the decision problem can be solved in polynomial time if and only if the corresponding optimization problem can. • We can make the statement that if the decision problem cannot be solved in polynomial time then the corresponding optimization problem cannot either. Max Clique Revisited • The max clique problem can be solved in polynomial time iff. The corresponding decision problem can be solved in polynomial time. • If the size of a max clique can be found in time g(n), the corresponding decision may be settled in that time of course. • If deciClique is algorithm for the decision problem with k in the complexity of f(n), then we apply the algorithm at most n time, for k=n, n-1, …, 2, 1, and we can solve the optimization problem, and with the complexity no worse than nf(n), which is polynomial only if f(n) is polynomial. Some Typical Decision Problems • Graph coloring • Given an undirected graph G and a positive integer k, is there a coloring of G using at most k colors? • Job scheduling with penalties • Given a group of jobs, each with its execution duration, deadline and penalty for missing the deadline, and a nonnegative integer k, is there a schedule with the total penalty bounded by k? Some Typical Decision Problems • Bin packing • Given k bins each of capacity one, and n objects with size s 1 , …, s n , (where s i is a rational number in (0,1]). Do the n objects ﬁt in k bins? • Knapsack • Given a knapsack of capacity C, n objects with sizes  s 1 , ..., s n and “proﬁts” p 1 , ..., p n , and a positive integer k. Is there a subset of the n objects that ﬁts in the knapsack and has total proﬁt at least k? (Subset sum as a simpliﬁed version) Some Typical Decision Problems • CNF-Satisﬁability • Given a CNF formula, is there a truth assignment that satisﬁes it? • Hamiltonian cycles or Hamiltonian paths • Given an undirected graph G. Does G have a Hamiltonian cycle or Hamiltonian path? • Traveling salesperson • Given a complete, weighted graph and an integer k, is there a Hamiltonian cycle with total weight at most k? Theory of NP-Completeness • What it cannot do • Provide a method of obtaining polynomial time algorithms for those “hard” problems • Negate the existence of algorithms of polynomial complexity for those problems • What it can do • Show that many of the problems for which there is no known polynomial time algorithm are computationally related The Class P • A polynomially bounded algorithm is one with its worst-case complexity bounded by a polynomial function of the input size. • A polynomially bounded problem is one for which there is a polynomially bounded algorithm. • The class P is the class of decision problems that are polynomially bounded. Notes on the Class P • Class P has a too broad coverage • In the sense that not every problems in P has an acceptable eﬃcient algorithm. • However • The problem not in P must be extremely expensive and probably impossible to solve in practice. • The problems in P have nice “closure” properties for algorithm integration. • The property of being in P is independent of the particular formal model of computation used. Nondeterministic AlgorithmNondeterministic Algorithm • For a particular decision problem with input x: • The answer computed by a nondeterministic algorithm is deﬁned to be yes if and only if there is some execution of the algorithm that gives a yes output. • The answer is no, if for all s, there is no output. Nondeterministic Algorithm Nondeterministic Graph Coloring generated by phase 1 The Class NP • A polynomial bounded nondeterministic algorithm is one for which there is a (ﬁxed) polynomial function p such that for each input of size n for which the answer is yes , there is some execution of the algorithm that produces a yes output in at most p(n) steps. • The class NP is the class of decision problems for which there is a polynomial bounded nondeterministic algorithm. The Class NP • NP means Non-deterministic P • From “deterministic” to “non‐deterministic” • From “solve a problem” to “verify the answer of a problem” • What does NP indicate? • Harder problems • Not too hard • At least, you can quickly understand the answer Proof of Being in NP • Graph coloring is in NP • Description of the input and the certiﬁcate • Properties to be checked for an answer “yes” • There are n colors listed: c 1 , c 2 , ..., c n (not necessarily diﬀerent) • Each c i is in the range 1,…,k • Scan the list of edges to see if a conﬂict exists • Proving that each of the above statement can be checked in polynomial time. CLIQUE is in NP SAT Satisﬁability Problem Given a CNF formula, is there a truth assignment that satisﬁes it? In other words, is there a assignment for the set of propositional variable in the CNF, such that the value of the formula is true. Relation between P and NP • An deterministic algorithm for a decision problem is a special case of a nondeterministic algorithm, which means: P ⊆ NP • The deterministic algorithm is looked as the phase 2 of a nondeterministic one, which always ignore the s the phase 1 has written. • Intuition implies that NP is a much larger set than P. • The number of possible s is exponential in n. • No one problem in NP has been proved not in P. P, NP and … ReductionPolynomial ReductionRelation of Reducibility • Problem P is polynomially reducible to Q if there exists a polynomial reduction from P to Q, denoted as: P≤ P Q • IfP≤ P Q and Q is in P, then P is in P • The complexity of P is the sum of T, with the input size n, and Q, with the input size p(n), where p is the polynomial bound on T, • So, the total cost is: p(n)+q(p(n)), where q is the polynomial bound on Q. (If P≤ P Q, then Q is at least as “hard” to solve as P) Thank you! Q & A","libVersion":"0.2.4","langs":""}