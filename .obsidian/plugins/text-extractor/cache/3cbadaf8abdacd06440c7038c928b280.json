{"path":"docs/课程/高质量图像渲染/课件/ch3_ray_tracing.pdf","text":"2024/4/2 Physically Based Rendering - Jie Guo 过 洁 南京大学计算机科学与技术系 guojie@nju.edu.cn 图形绘制技术（Rendering） Chapter 3: Ray Tracing Basics Ray Tracing: Introduction ◼ Ray tracing is one of the most popular methods used in 3D computer graphics to render an image ◼ Good at simulating specular effects ◼ Tracing the path taken by a ray of light through the scene ◼ Rays are reflected, refracted, or absorbed whenever intersect an object ◼ Can produce shadows 2024/4/2 Physically Based Rendering - Jie Guo Ray Tracing: Model ◼ Perceived color at point p is an additive combination of local illumination (e.g., Phong), reflection, and refraction effects ◼ Compute reflection, refraction contributions by tracing respective rays back from p to surfaces they came from and evaluating local illumination at those locations ◼ Apply operation recursively to some maximum depth to get:  – Reflections of reflections of ...  – Refractions of refractions of ...  – And of course mixtures of the two 2024/4/2 Physically Based Rendering - Jie Guo Ray Tracing: History ◼ Appel 68 ◼ Whitted 80 [recursive ray tracing]  Landmark in computer graphics ◼ Lots of work on various geometric primitives ◼ Lots of work on accelerations ◼ Current Research  Real-Time raytracing (historically, slow technique)  Ray tracing architecture 2024/4/2 Physically Based Rendering - Jie Guo Ray Tracing: Recursion 2024/4/2 Physically Based Rendering - Jie Guo Problems with Recursion ◼ Reflection rays may be traced forever ◼ Generally, set maximum recursion depth ◼ Same for transmitted rays (take refraction into account) 2024/4/2 Physically Based Rendering - Jie Guo Ray/Object Intersections ◼ Heart of Ray Tracer  One of the main initial research areas  Optimized routines for wide variety of primitives ◼ Various types of info  Shadow rays: Intersection/No Intersection  Primary rays: Point of intersection, material, normals  Texture coordinates ◼ Work out examples  Triangle, sphere, polygon, general implicit surface 2024/4/2 Physically Based Rendering - Jie Guo Rays ◼ A ray is a semi-infinite line define by its origin o and its direction vector d: 2024/4/2 Physically Based Rendering - Jie Guo Normals ◼ A surface normal (or just normal) is a vector that is perpendicular to a surface at a particular position. ◼ Very important for surface shading. 2024/4/2 Physically Based Rendering - Jie Guo Normals ◼ Visualization of surface normals 2024/4/2 Physically Based Rendering - Jie Guo Calculating Normal Vectors ◼ Calculate the normal vector for a single triangle by using the cross product. 2024/4/2 Physically Based Rendering - Jie Guo Calculating Normal Vectors ◼ Calculate the normal vector for a vertex 2024/4/2 Physically Based Rendering - Jie Guo Tangent Space ◼ Defined by three vectors: the normal vector N, the tangent vector T, and the bitangent vector B. ◼ Transform from tangent space into object space using the matrix: 2024/4/2 Physically Based Rendering - Jie Guo Sphere-Definition ◼ A sphere of radius r at the origin ◼ Implicit: x2+y2+z2-r2=0 ◼ Parametric: f(θ,) x=rsinθcos y=rsinθsin z=rcosθ mapping f(u,v) over [0,1]2  =u max θ=θmin+v(θmax-θmin) useful for texture mapping 2024/4/2 Physically Based Rendering - Jie Guo Sphere-Intersection 2024/4/2 Physically Based Rendering - Jie Guo 2222 rzyx =++( ) ( ) ( ) 2222 rtdotdotdo zzyyxx =+++++ 0 2 =++ CBtAt 222 zyx dddA ++= )(2 zzyyxx odododB ++= 2222 roooC zyx −++= Step 1 Sphere-Intersection 2024/4/2 Physically Based Rendering - Jie Guo A ACBB t 2 4 2 0 −−− = A ACBB t 2 4 2 1 −+− = If (B2-4AC<0) then the ray misses the sphere Step 2 Step 3 Calculate t0 and test if t0<0 (actually mint, maxt) Step 4 Calculate t1 and test if t1<0 Cylinder-Definition 2024/4/2 Physically Based Rendering - Jie Guo max u= cosrx = sinry = )( minmaxmin zzvzz −+= Cylinder-Intersection 2024/4/2 Physically Based Rendering - Jie Guo 222 ryx =+( ) ( ) 222 rtdotdo yyxx =+++ 0 2 =++ CBtAt 22 yx ddA += )(2 yyxx ododB += 222 rooC yx −+= Disk-Definition 2024/4/2 Physically Based Rendering - Jie Guo max u= cos))1(( vrrvx i +−= hz = sin))1(( vrrvy i +−= Disk-Intersection 2024/4/2 Physically Based Rendering - Jie Guo h-Oz h t Dz D htDO zz =+ z z D Oh t − = Triangle Mesh 2024/4/2 Physically Based Rendering - Jie Guo class TriangleMesh : public Shape { … int ntris, nverts; int *vertexIndex; Point *p; Normal *n; per vertex Vector *s; tangent float *uvs; parameters } x,y,z x,y,z x,y,z x,y,z x,y,z… vi[3*i] vi[3*i+1] vi[3*i+2] p Triangle Mesh ◼ Wavefront .obj file 2024/4/2 Physically Based Rendering - Jie Guo Triangle Mesh ◼ Wavefront .obj file 2024/4/2 Physically Based Rendering - Jie Guo Ray-Triangle Intersection 2024/4/2 Physically Based Rendering - Jie Guo Ray-Triangle Intersection 2024/4/2 Physically Based Rendering - Jie Guo 210)1( vVuVVvutDO ++−−=+ 1 and 0, + vuvu   00201 VO v u t VVVVD −=           −−− a point on the ray a point inside the triangle Ray-Triangle Intersection 2024/4/2 Physically Based Rendering - Jie Guo   00201 VO v u t VVVVD −=           −−− O D V0 V1 V2 O D V0 V1 V2 1 1 translation rotation Geometric interpretation: what is O’s coordinate under the new coordinate system? Ray-Triangle Intersection 2024/4/2 Physically Based Rendering - Jie Guo 011 VVE −= 022 VVE −= 0VOT −=   00201 VO v u t VVVVD −=           −−−  T v u t EED =           − 21 Ray-Triangle Intersection 2024/4/2 Physically Based Rendering - Jie Guo           − − − =           TED ETD EET EED v u t ,, ,, ,, ,, 1 1 2 21 21   T v u t EED =           − 21 ABCBCACBA −=−= )()(,, Cramer’s rule Ray-Triangle Intersection 2024/4/2 Physically Based Rendering - Jie Guo 2EDP = 1ETQ =               =           DQ TP EQ EP v u t 2 1 1           − − − =           TED ETD EET EED v u t ,, ,, ,, ,, 1 1 2 21 21 1 division 27 multiplies 17 adds The Cost of Ray Tracing ◼ Many Primitives ◼ Many Rays ◼ Expensive Intersections 2024/4/2 Physically Based Rendering - Jie Guo Acceleration Testing each object for each ray is slow ◼ Fewer Rays Adaptive sampling, depth control ◼ Generalized Rays Beam tracing, cone tracing, pencil tracing etc. ◼ Faster Intersections  Optimized Ray-Object Intersections  Fewer Intersections 2024/4/2 Physically Based Rendering - Jie Guo Fewer Intersections 2024/4/2 Physically Based Rendering - Jie Guo Reduce the number of ray-primitive intersections Acceleration Structures Bounding boxes (possibly hierarchical) If no intersection bounding box, needn’t check objects 2024/4/2 Physically Based Rendering - Jie Guo Bounding Box Ray Acceleration Structures 2024/4/2 Physically Based Rendering - Jie Guo Uniform grid 均匀网格 Bounding volume hierarchy BVH（层次包围盒） Kd-tree Space subdivision approachesObject subdivision approaches BVH in 2D 2024/4/2 Physically Based Rendering - Jie Guo BVH in 3D 2024/4/2 Physically Based Rendering - Jie Guo BVH Construction 2024/4/2 Physically Based Rendering - Jie Guo BVH Construction ◼ Find bounding box of objects 2024/4/2 Physically Based Rendering - Jie Guo BVH Construction ◼ Find bounding box of objects ◼ Split objects into two groups 2024/4/2 Physically Based Rendering - Jie Guo BVH Construction ◼ Find bounding box of objects ◼ Split objects into two groups ◼ Recurse 2024/4/2 Physically Based Rendering - Jie Guo BVH Construction ◼ Find bounding box of objects ◼ Split objects into two groups ◼ Recurse 2024/4/2 Physically Based Rendering - Jie Guo BVH Construction ◼ Find bounding box of objects ◼ Split objects into two groups ◼ Recurse 2024/4/2 Physically Based Rendering - Jie Guo BVH Construction ◼ Find bounding box of objects ◼ Split objects into two groups ◼ Recurse 2024/4/2 Physically Based Rendering - Jie Guo BVH Traversal ◼ If hit parent, then check all children 2024/4/2 Physically Based Rendering - Jie Guo BVH Traversal ◼ Don't return intersection immediately because the other subvolumes may have a closer intersection 2024/4/2 Physically Based Rendering - Jie Guo Bounding Volumes (Boxes) ◼ Wrap things that are hard to test for intersection in things that are easy to test ◼ Most common bounding volume types:  Non-aligned bounding box  bounding sphere  axis-aligned bounding box (AABB) 2024/4/2 Physically Based Rendering - Jie Guo AABB ◼ Axis-aligned bounding box(AABB): the box is parallel to the x,y,z axis of the world coordinate system. ◼ Very easy to construct. ◼ Very efficient for intersection test. 2024/4/2 Physically Based Rendering - Jie Guo AABB-Intersection ◼ Key idea: intersection of three slabs 2024/4/2 Physically Based Rendering - Jie Guo x=x0 x=x1 x x DOx t − = 1 1 xOx −11t Space Subdivision 2024/4/2 Physically Based Rendering - Jie Guo Quadtree (2D) Octree (3D) Unifrom grid Space Subdivision 2024/4/2 Physically Based Rendering - Jie Guo KD tree BSP tree Uniform Grid 2024/4/2 Physically Based Rendering - Jie Guo Preprocess scene 1. Find bounding box Uniform Grid 2024/4/2 Physically Based Rendering - Jie Guo Preprocess scene 1. Find bounding box 2. Determine grid resolution Uniform Grid 2024/4/2 Physically Based Rendering - Jie Guo Preprocess scene 1. Find bounding box 2. Determine grid resolution 3. Place object in cell if its bounding box overlaps the cell Uniform Grid 2024/4/2 Physically Based Rendering - Jie Guo Preprocess scene 1. Find bounding box 2. Determine grid resolution 3. Place object in cell if its bounding box overlaps the cell 4. Check that object overlaps cell (expensive!) Uniform Grid Traversal 2024/4/2 Physically Based Rendering - Jie Guo Preprocess scene Traverse grid 3D line = 3D-DDA (Digital Differential Analyzer) 12 12 xx yy m − − = bmxy += 11 +=+ ii xx myy ii +=+1 DDA bmxy ii += ++ 11 naive Teapot in a stadium problem ◼ Not adaptive to distribution of primitives 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree 2024/4/2 Physically Based Rendering - Jie Guo A A Leaf nodes correspond to unique regions in space Kd-Tree 2024/4/2 Physically Based Rendering - Jie Guo A A B Kd-Tree 2024/4/2 Physically Based Rendering - Jie Guo A B A B Kd-Tree 2024/4/2 Physically Based Rendering - Jie Guo A B A B C Kd-Tree 2024/4/2 Physically Based Rendering - Jie Guo A B C A B C Kd-Tree 2024/4/2 Physically Based Rendering - Jie Guo A B C A B C D Kd-Tree 2024/4/2 Physically Based Rendering - Jie Guo A B C D A B C D Kd-Tree Traversal 2024/4/2 Physically Based Rendering - Jie Guo A B C D A B C D Kd-Tree Traversal 2024/4/2 Physically Based Rendering - Jie Guo A B C D A B C D Kd-Tree Construction 1. Pick an axis, or optimize across all three 2. Build a set of candidate split planes (cost extrema must be at bbox vertices) 3. Sort or bin the triangles 4. Sweep to incrementally track L/R counts, cost 5. Output position of minimum cost split Running time: ◼ Characteristics of highly optimized tree  very deep, very small leaves, big empty cells 2024/4/2 Physically Based Rendering - Jie Guo NNNT NTNNNT 2log)( )2/(2log)( = += Kd-Tree Construction ◼ Three key issues:  Choosing split axis  Determining split location  Termination 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Construction ◼ Choosing splitting axis: ◼ Round-robin ◼ Largest extent 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Construction ◼ where to put the splitting planes? 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Construction ◼ where to put the splitting planes? 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Construction ◼ where to put the splitting planes? 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Construction ◼ where to put the splitting planes? 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Construction ◼ where to put the splitting planes? 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Construction ◼ Middle point ◼ Medium ◼ Surface area heuristic 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Construction 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Construction ◼ Middle point 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Construction ◼ Medium 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Construction ◼ SAH 2024/4/2 Physically Based Rendering - Jie Guo Surface Area Heuristic ◼ Surface Area Heuristic：使用最为广泛的评估候选 分割平面代价的评估函数 ◼ 基于几何概率理论 ◼ 三项假设条件：  #1：场景中的光线是随机均匀分布的直线；  #2：节点的遍历代价Kt和直线与三角形的相交测试代 价Ki已知；  #3：与N个三角形相交的代价为NKi，即叶节点的相交 测试代价与其包含的三角形数目成正比。 2024/4/2 Physically Based Rendering - Jie Guo Surface Area Heuristic 2024/4/2 Physically Based Rendering - Jie Guo 击中左右子节点的条件概率分别为： 根据#2，某个节点的总的代价为： Surface Area Heuristic 2024/4/2 Physically Based Rendering - Jie Guo 展开上式可得根节点的总代价为： 使用局部贪心算法简化： Surface Area Heuristic 2024/4/2 Physically Based Rendering - Jie Guo 核心问题：搜索SAH函数的最小值 Kd-Tree Construction 2024/4/2 Physically Based Rendering - Jie Guo ◼ 基于三角形排序的算法：[Wald et al. 2006], … ◼ 基于BIN的算法：[Hurley et al. 2002], … ◼ 并行算法：[Shevtsov et al. 2007], [Hunt et al. 2006], [Zhou et al. 2008], [Choi et al. 2010], … Kd-Tree Construction ◼ 其中并行化构造算法是趋势，包括multi-core CPU和 many-core GPU。 ◼ 对于BVH，情况类似。 2024/4/2 Physically Based Rendering - Jie Guo Choose Split Planes By Sorting 2024/4/2 Physically Based Rendering - Jie Guo Start from the axis with maximum extent, sort all edge events and process them in order A B C a0 b0 a1 b1 c0 c1 Kd-Tree Construction ◼ What about time complexity? 2024/4/2 Physically Based Rendering - Jie Guo Termination Criteria ◼ When should we stop splitting?  Bad: depth limit, number of triangles  Good: when split does not help any more. ◼ Threshold of cost improvement  Stretch over multiple levels  For example, if cost does not go down after three splits in a row, terminate ◼ Threshold of cell size  Absolute probability SA(node)/SA(scene) small 2024/4/2 Physically Based Rendering - Jie Guo Tree Representation 8-byte (reduced from 16-byte, 20% gain) struct KdAccelNode { ... union { float split; // Interior int onePrimitive; // Leaf int *primitives; // Leaf }; union { int flags; // Both int nPrims; // Leaf int aboveChild; // Interior }; }2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Traversal 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Traversal 2024/4/2 Physically Based Rendering - Jie Guo tmax tmin tplane far near ToDo stack Kd-Tree Traversal 2024/4/2 Physically Based Rendering - Jie Guo tmin tmax far near ToDo stack Kd-Tree Traversal 2024/4/2 Physically Based Rendering - Jie Guo tmax tmin ToDo stack tplane near far Kd-Tree Traversal 2024/4/2 Physically Based Rendering - Jie Guo tmin ToDo stack tmax Kd-Tree Traversal 2024/4/2 Physically Based Rendering - Jie Guo tmin ToDo stack tmax Kd-Tree Traversal-Leaf node 1. Check whether ray intersects primitive(s) inside the node; update ray’s maxt 2. Grab next node from ToDo queue 2024/4/2 Physically Based Rendering - Jie Guo Kd-Tree Traversal-Interior node 2024/4/2 Physically Based Rendering - Jie Guo 1. Determine near and far (by testing which side O is) 2. Determine whether we can skip a node below above node+1 &(nodes[node->aboveChild]) near far near far tplane tplane tplane tmin tmax tmin tmax Grid vs. KD-Tree ◼ Uniform grid acceleration structure  Regular structure = efficient traversal  Regular structure = poor partitioning ◼ KD-Tree  Adapt to scene complexity  Compact storage, efficient traversal  “Best” for CPU ray tracing 2024/4/2 Physically Based Rendering - Jie Guo BVH vs. KD-Tree ◼ Building time: BVH < KD-Tree ◼ Ray intersection test: BVH > KD-Tree 2024/4/2 Physically Based Rendering - Jie Guo How to choose? ◼ Type of rendering applications (e.g. offline, interactive) ◼ Type of scenes (e.g. static, deformable, dynamic) ◼ Hardware architecture: single core CPU, multi-core CPU, many-core GPU. ◼ Tradeoff: quality or building time? 2024/4/2 Physically Based Rendering - Jie Guo How to choose? ◼ Hybrid methods: combines two structures in different levels. ◼ E.g., Irregular grid: build a coarse uniform grid for the top level and then subdivided each cell independently and adaptively. 2024/4/2 Physically Based Rendering - Jie Guo","libVersion":"0.2.4","langs":""}